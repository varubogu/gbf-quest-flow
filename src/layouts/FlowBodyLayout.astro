---
import { HamburgerMenuItems } from "@/components/molecules/HamburgerMenuItems";
import FlowBaseLayout from "./FlowBaseLayout.astro";
import type { Flow } from "@/types/models";
import { ActionTableContainer } from "@/components/organisms/ActionTableContainer";
interface Props {
  data: Flow;
}

const { data } = Astro.props;
---

<FlowBaseLayout data={data}>
  <div class="min-h-screen flex flex-col">
    <header
      class="h-14 border-b flex items-center px-4 fixed w-full bg-background"
    >
      <HamburgerMenuItems client:load data={data} />
      <h1 class="ml-4 text-lg font-medium">{data.title}</h1>
    </header>
    <main class="flex-1 pt-14">
      <!-- グリッドコンテナを3行に分割。中央行がドラッグ可能な仕切り -->
      <div
        id="resizableContainer"
        class="h-[calc(100vh-3.5rem)] grid"
        style="grid-template-rows: 1fr 8px 1fr;"
      >
        <!-- 上部の内容 -->
        <div class="p-4 overflow-auto">
          <div>
            <pre>{data.always}</pre>
          </div>
        </div>

        <!-- ドラッグハンドル（仕切り） -->
        <div id="resizer" class="bg-gray-300 cursor-row-resize"></div>

        <!-- 下部の内容 -->
        <div class="overflow-hidden">
          <ActionTableContainer
            client:load
            data={data.flow}
            buttonPosition="right"
          />
        </div>
      </div>
    </main>
  </div>

  <!-- ドラッグ操作のためのスクリプト -->
  <script>
    const resizer: HTMLElement | null = document.getElementById("resizer");
    const container2: HTMLElement | null = document.getElementById("resizableContainer");
    const container: HTMLElement = container2 ?? document.body;
    let startY: number, topRowHeight: number, bottomRowHeight: number;

    // マウスイベントとタッチイベントで共通してY座標を取得するヘルパー関数
    function getClientY(e: MouseEvent | TouchEvent) {
      // e.clientY があればマウスイベント、なければタッチイベントから取得
      return (
        'clientY' in e ? e.clientY : (e.touches && e.touches[0] ? e.touches[0].clientY : 0)
      );
    }

    // ドラッグ開始（マウス：mousedown / タッチ：touchstart）
    function initDrag(e: MouseEvent | TouchEvent) {
      // タッチイベントの場合、不要なスクロールを防ぐための処理
      e.preventDefault();

      startY = getClientY(e);
      const computedStyle = window.getComputedStyle(container);
      const rows = computedStyle.gridTemplateRows.split(" ");
      topRowHeight = parseFloat(rows[0]);
      bottomRowHeight = parseFloat(rows[2]);

      document.addEventListener("mousemove", drag, false);
      document.addEventListener("touchmove", drag, false);
      document.addEventListener("mouseup", stopDrag, false);
      document.addEventListener("touchend", stopDrag, false);
    }

    // ドラッグ中の処理（マウス：mousemove / タッチ：touchmove）
    function drag(e) {
      const clientY = getClientY(e);
      const dy = clientY - startY;
      const newTop = topRowHeight + dy;
      const newBottom = bottomRowHeight - dy;

      // 最低高さの制限（必要に応じて変更）
      if (newTop < 50 || newBottom < 50) return;

      container.style.gridTemplateRows = `${newTop}px 8px ${newBottom}px`;
    }

    // ドラッグ終了（マウス：mouseup / タッチ：touchend）
    function stopDrag() {
      document.removeEventListener("mousemove", drag, false);
      document.removeEventListener("touchmove", drag, false);
      document.removeEventListener("mouseup", stopDrag, false);
      document.removeEventListener("touchend", stopDrag, false);
    }

    resizer?.addEventListener("mousedown", initDrag, false);
    resizer?.addEventListener("touchstart", initDrag, false);
  </script>
</FlowBaseLayout>
